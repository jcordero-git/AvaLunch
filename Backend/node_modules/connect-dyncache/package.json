{
  "name": "connect-dyncache",
  "version": "0.2.0",
  "description": "Connect middleware to enable intelligent cache headers for dynamic content",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/taxilian/connect-dyncache.git"
  },
  "peerDependencies": {
    "express": ">= 3.1.0"
  },
  "keywords": [
    "etag",
    "last-modified",
    "cache",
    "if-none-match",
    "304"
  ],
  "author": {
    "name": "Richard Bateman",
    "email": "taxilian@gmail.com"
  },
  "license": "BSD",
  "readme": "# connect-dyncache\n\nNodeJS is connect middleware to make it easy to add [ETag](http://en.wikipedia.org/wiki/HTTP_ETag) or Last-Modified headers to your dyanmic\nresources to allow browsers to cache responses.\n\n## Example\n    \n    var app = require('express').createServer();    \n\n    app.use(require('connect-dyncache')());\n\n    app.get('/page', function(req, res) {\n      res.autoEtag();\n      res.send(\"Some content that is generated based on state\");\n    });\n\n    app.get('/page2', function(req, res) {\n        res.setEtag(\"Some well-known value\");\n        res.send(\"Some large content that we have a pre-defined etag we can use for (such as a revision id or something)\");\n    });\n\n    app.get('/page3', function(req, res) {\n        res.setLastModifiedDate(new Date(\"Thu Feb 21 2013 21:46:00\"));\n        res.send(\"Some large content generated by something that we can track with a modified date, such as a db record\");\n    });\n\n... and on the other side of the TCP connection ...\n\n    HTTP/1.0 304 Not Modified\n    Content-Length: 0\n\n# Why\n\nETag headers basically give the client something to identify this version of the document with. Using it with dynamic data\nlike this all the processing still happens on the server, but you can save a lot of bandwidth (and speed up the client experience)\nby supporting ETag or Last-Modified date caching.\n\nThis middeware adds three methods for caching; you can use `res.autoEtag()` anywhere before the first data is sent to the client to\nhave it generate an etag using an md5 hash of your page.  If you have some identifier that can be used to uniquely identify *this version*\nof the page you can set that using `res.setEtag(etag)`, and if you have a modified date that you can use you can set that with\n`res.setLastModifiedDate()`.\n\n## `res.autoEtag()`\n\nCall this function to have the response object automatically calculate the md5 sum of your response and use that as the \nETag.  This is probably the easiest method to use.\n\n## `res.setEtag()`\n\nIf you already have something that is a valid etag (something that will absolutely change if the document ever changes)\nthen you can use it here in this call to setEtag. If the ETag provided by the page matches this one then this method will return false.\nIf it does, you can stop processing and just call `res.end()`.\n\n## `res.setLastModifiedDate(date)`\n\nIf you know when the last time the current page was modified, such as if the core database table the page is generated from\nhas a modified date on it, you can use that here either in place of or in addition to the ETag. If the client already has\na cached copy of the page based on the date they provided, this method will return false.  If it does, you can stop processing\nand just call `res.end()`.\n\n## see also...\n\n...[cachify](https://github.com/mozilla/connect-cachify) - middleware to help with caching static resources.\n...[etagify](https://github.com/lloyd/connect-etagify) - a different approach to etag caching for pages that don't change during the lifetime of the process.\n\n## Help out\n\nI created this because I needed it; feel free to extend it with examples, fix bugs, and add functionality through pull requests!\n\n## License\n\n    Copyright (c) 2013, Richard Bateman <taxilian@gmail.com>\n\n    You can use this however you want. I disavow responsibility for\n    *anything* that occurs as a result of using this, whether good\n    or bad, including but not limited to: Correct caching behavior,\n    incorrect caching behavior, promotion and/or positive change of\n    employment, downsizing and/or negative change of employment,\n    terrorism, philanthropism, sleep deprivation, sleep apnia,\n    excessive spam, marital problems, weddings, funerals, unexpected\n    lottery winnings, uncomfortable social situations, new facebook\n    friends, increase in website speed, decrease in website speed,\n    groupies, guppies, puppies, or loss of sales.\n\n    Use at your own risk.\n\n",
  "readmeFilename": "README.md",
  "_id": "connect-dyncache@0.2.0",
  "dist": {
    "shasum": "c70ce57dbb0549f6023ea161ef73f7e6742f30bd",
    "tarball": "http://registry.npmjs.org/connect-dyncache/-/connect-dyncache-0.2.0.tgz"
  },
  "_from": "connect-dyncache@",
  "_npmVersion": "1.2.15",
  "_npmUser": {
    "name": "taxilian",
    "email": "taxilian@gmail.com"
  },
  "maintainers": [
    {
      "name": "taxilian",
      "email": "taxilian@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "c70ce57dbb0549f6023ea161ef73f7e6742f30bd",
  "_resolved": "https://registry.npmjs.org/connect-dyncache/-/connect-dyncache-0.2.0.tgz"
}
